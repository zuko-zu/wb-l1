const MathX = (function () {
  // Приватные функции, не доступные извне. Они нам понадобятся для публичных методов.

  /**
   * Вычисляет число Фибоначчи в заданной позиции.
   *
   * @param {number} n - Позиция числа фибоначчи, которое нужно вычислить (должно быть >= 0).
   * @returns {number} - Значение числа Фибоначчи в заданной позиции.
   */
  function fibonacci(n) {
    // В ряде фибоначчи нет отрицательных значений.
    // Также F(0) равно 0.
    if (n <= 0) return 0;
    // F(1) равно 1.
    if (n === 1) return 1;

    // Переменные для хранения текущего и предыдущего числа фибоначчи.
    let prev = 0;
    let current = 1;

    // В цикле итерируем числа от 2 до n. С 2, так как предыдущие 2 числа известны.
    for (let i = 2; i <= n; i++) {
      // Вычисляем следующее число фибоначчи.
      const next = prev + current;
      // Обновляем значения
      prev = current;
      current = next;
    }
    // Возвращаем текущее значение фибоначчи.
    return current;
  }

  /**
   * Проверяет, является ли число простым.
   *
   * @param {number} num - Проверяемое число.
   * @returns {boolean} - Возвращает true, если число является простым, и false в противном случае.
   */
  function isPrime(num) {
    if (num <= 1) return false;
    if (num <= 3) return true;

    if (num % 2 === 0 || num % 3 === 0) return false;

    let i = 5;
    while (i * i <= num) {
      if (num % i === 0 || num % (i + 2) === 0) return false;
      i += 6;
    }
    return true;
  }

  // Возвращаемые функции, которые будут доступны извне

  return {
    // Функция для вычисления N-го числа в ряду Фибоначчи
    fibonacci: function (n) {
      return fibonacci(n);
    },

    /**
     * Функция для вычисления всех чисел в ряду Фибоначчи до числа N.
     *
     * @param {number} n - Число N, до которого нужно вычислить ряд Фибоначчи.
     * @returns {number[]} - Массив, содержащий числа Фибоначчи до N включительно.
     */
    fibonacciSeries: function (n) {
      // Создаем пустой массив, который будет использоваться для хранения чисел Фибоначчи.
      const series = [];
      //  Этот цикл будет итерироваться через все числа от 0 до n (не включая n).
      for (let i = 0; i < n; i++) {
        //  В каждой итерации цикла вызываем функцию fibonacci(i), результат добавляем в массив.
        series.push(fibonacci(i));
      }
      // Возвращаем результат.
      return series;
    },

    /**
     * Функция для вычисления N-го простого числа.
     *
     * @param {number} n - Порядковый номер N простого числа для вычисления.
     * @returns {number} - N-е простое число.
     */
    nthPrime: function (n) {
      let count = 0;
      let num = 2;
      while (count < n) {
        // Если текущее число является простым, увеличиваем count.
        if (isPrime(num)) {
          count++;
        }
        // Увеличиваем num, если простые числа не были найдены.
        if (count < n) {
          num++;
        }
      }
      // Возвращаем результат.
      return num;
    },

    /**
     * Функция для вычисления всех простых чисел до числа N.
     *
     * @param {number} n - Число N, до которого нужно найти простые числа.
     * @returns {number[]} - Массив всех простых чисел от 2 до N.
     */
    primeSeries: function (n) {
      // создаем пустой массив, в котором будут храниться простые числа.
      const primes = [];
      //  С помощью цикла, перебираем числа от 2 до n. C 2 потому что простые числа начинаются с 2.
      for (let i = 2; i <= n; i++) {
        // Вызываем функцию isPrime(i), чтобы проверить, является ли перебираемое значение простым числом..
        if (isPrime(i)) {
          // Если  условие выполнилось, добавляем число в массив.
          primes.push(i);
        }
      }
      // Возвращаем результат.
      return primes;
    },
  };
})();

// Примеры использования

console.log(MathX.fibonacci(6)); // 8

console.log(MathX.fibonacciSeries(10)); // [0, 1, 1,  2,  3, 5, 8, 13, 21, 34]

console.log(MathX.nthPrime(5)); // 11

console.log(MathX.primeSeries(10)); // [2, 3, 5, 7]
