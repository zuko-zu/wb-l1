/**
 * Создаем функцию для выполнения массива функций с заданными аргументами.
 *
 * @param {Function[]} functions - Массив функций, которые нужно выполнить.
 * @returns {Function} - Функция-исполнитель, которая вызывает каждую функцию из массива и возвращает массив результатов.
 */

// Функция принимает один аргумент functions, который является массивом функций.
function callFunctions(functions) {
  /**
   * Функция, которая выполняет массив функций для заданных аргументов.
   *
   * @param {...any} args - Аргументы, передаваемые в каждую функцию из массива.
   * @returns {any[]} - Массив результатов выполнения каждой функции.
   */

  // Возвращаем новую функцию, которая будет выполнять массив функций, передавая ей аргументы.
  // Используем ..args чтобы применить любое количество аргументов.
  return function (...args) {
    // Создаем пустой массив для хранения результатов работы функций.
    const results = [];

    // Проходимся по массиву функций.
    for (const func of functions) {
      // Выполняем текущую функцию с переданными аргументами и добавляем результат в массив results.
      results.push(func(...args));
    }

    // Возвращаем результат.
    return results;
  };
}

// Пример использования:

const functions = [
  function add(x) {
    return x + 1;
  },

  function square(x) {
    return x * x;
  },

  function subtractFive(x) {
    return x - 5;
  },
];

// Создаем функцию с помощью callFunctions.
const combinedFunction = callFunctions(functions);

// Выводим результаты в консоль.

console.log(combinedFunction(10));
// [11, 100, 5]
