/**
 * Функция для проверки, является ли строка палиндромом.
 * Палиндром — это строка, которая читается одинаково в обоих направлениях.
 *
 * Также в данной реализации палиндромом также считается пустая строка и строка состоящая из одного символа
 *
 * @param {string} str - Строка для проверки.
 * @returns {boolean} - Возвращает true, если строка является палиндромом, и false в противном случае.
 */

// 1. Использование методов встроенных объектов JS

function isPalindrome(str) {
  // Приводим все символы к нижнему регистру, тем самым делая функцию не регистрозависимой
  // Регулярное выражение удаляет все символы в строке, которые !не являются буквами из !любого языка или цифрами
  // [ ]: Создаем набор символов, который соответствует любому символу, находящемуся внутри скобок.
  // ^: Внутри набора символов, символ ^ является отрицанием и означает "не"
  // \p{L}: Это Unicode-класс, который представляет собой буквенные символы из любого языка
  // \p{N}: Это Unicode-класс, представляющий собой цифровые символы. Это включает в себя цифры из различных систем письма.
  // g: Глобальный поиск. Применяем выражение ко всей строке, а не к первому совпадению.
  // u: Использование кодировки Юникода. Этот флаг гарантирует корректное обработку символов Юникода в регулярном выражении.

  str = str.replace(/[^\p{L}\p{N}]/gu, '').toLowerCase();

  // Сравниваем входящу строку с перевернутой
  return str === str.split('').reverse().join('');
}

// 2. Использование рекурсии

function isPalindrome2(str) {
  str = str.replace(/[^\p{L}\p{N}]/gu, '').toLowerCase();

  // Считаем строку палиндромом, если она пуста или состоит из одного символа. Выходим из функции, возвращаем результат
  if (str.length <= 1) {
    return true;
  }

  // Строка не является палиндромом, если ее превый и последний символ не совпадают. Выходим из функции, возвращаем результат
  if (str[0] !== str[str.length - 1]) {
    return false;
  }

  // Если предыдущие условия не сработали, вызываем функцию снова, передаем подстроку без первого и последнего символа.
  return isPalindrome2(str.slice(1, -1));
}

// 3. Перебор в цикле

function isPalindrome3(str) {
  str = str.replace(/[^\p{L}\p{N}]/gu, '').toLowerCase();

  // Проходимся в цикле только по первой половине строки
  for (let i = 0; i < str.length / 2; i++) {
    // Здесь сравниваем текущий перебираемый символ с парным символом из оставшейся части строки.
    // Сразу возвращем false и выходим из фунции, если символы на этой итерации не совпали.
    if (str[i] !== str[str.length - 1 - i]) {
      return false;
    }
  }

  // Возвращаем true, если цикл не был прерван
  return true;
}

// Примеры использования
const string = 'аргентина мAнит негра ';
console.log(isPalindrome(string)); // true
console.log(isPalindrome2(string)); // true
console.log(isPalindrome3(string)); // true
